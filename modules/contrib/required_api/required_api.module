<?php

/**
 * @file
 * Provides an unified API to find out if a field widget should be required.
 *
 * Determines if a widget should be required or not based on contexts.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function required_api_help($path, $arg) {
  switch ($path) {

    case 'admin/help#required_api':
      $output = '';
      $output .= '<p>' . t('The Required API module provides an API to find out
        if a widget is requried or not.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function required_api_permission() {
  return [
    'administer required settings' => [
      'title' => t('Administer required settings'),
      'description' => t('Administer global required settings.'),
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Applies to FORM_ID field_config_edit_form.
 */
function required_api_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {

  $field_definition = $form_state->getFormObject()->getEntity();
  $field_name = $field_definition->getName();
  $parents = ['third_party_settings', 'required_api', 'required_plugin'];

  $manager = \Drupal::service('plugin.manager.required_api.required');

  if (!$plugin_id = $form_state->getValue($parents)) {
    $plugin_id = $manager->getPluginId($field_definition);
  }

  $plugins = $manager->getDefinitionsAsOptions();

  if (count($plugins) > 1) {

    $form['required_plugin'] = [
      '#title' => t('Choose a required strategy:'),
      '#type' => 'radios',
      '#options' => $plugins,
      '#default_value' => $plugin_id,
      '#weight' => $form['required']['#weight'] - 1,
      '#ajax' => [
        'callback' => 'require_api_element_ajax_callback',
        'wrapper' => 'required-ajax-wrapper',
        'effect' => 'fade',
        'speed' => 'fast',
      ],
      '#parents' => $parents,
    ];

  }

  $form['required']['#access'] = FALSE;

  $configuration = [
    'plugin_id' => $plugin_id,
    'field_definition' => $field_definition,
  ];

  $plugin = $manager->getInstance($configuration);
  $element = $plugin->formElement($field_definition);

  $form['required_plugin_options'] = $element;
  $form['required_plugin_options']['#weight'] = $form['required']['#weight'];

  // Default value needs always to be NOT required.
  if (
    isset($form['default_value'])
    && isset($form['default_value'][$field_name])
  ) {
    $form['default_value'][$field_name]['widget'][0]['#required'] = FALSE;
    $form['default_value'][$field_name]['widget'][0]['value']['#required'] = FALSE;
  }

}

/**
 * Renders the form element to select the required property.
 *
 * @return array
 *   The rendered element.
 */
function require_api_element_ajax_callback($form, $form_state) {
  return $form['required_plugin_options'];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Saves default (Core) required setting back to Field Config entity.
 */
function required_api_field_config_presave(EntityInterface $entity) {
  /** @var \Drupal\field\FieldConfigInterface $entity */
  $plugin = $entity->getThirdPartySetting('required_api', 'required_plugin');
  $plugin_setting = $entity->getThirdPartySetting('required_api', 'required_plugin_options', FALSE);
  if ($plugin == 'default') {
    $entity->setRequired(($plugin_setting));
  }
}
