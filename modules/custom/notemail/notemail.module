<?php

/**
 * @file
 * Contains notemail.module..
 */
// require_once '/opt/drupal/vendor/autoload.php';
require_once '/opt/drupal/vendor/autoload.php';
//require_once 'D:\xampp\htdocs\aunador\vendor\autoload.php';
//require __DIR__ . '/vendor/autoload.php';
use Twilio\Rest\Client;
use Drupal\notemail\Helper\Helper;
use Drupal\notemail\Helper\WorkflowEmail;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\Core\Site\Settings;
use Drupal\KernelTests\KernelTestBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Entity;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase; 

use Drupal\notemail\Controller\MainController;

use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Entity\ContentEntityForm;




/**
 * Implements hook_entity_presave().
 */

function notemail_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'e_prestation') {
    // Change the title field label.
    $fields['title']->setLabel(t('Product name'));
  }
}


function notemail_commerce_product_presave(ProductInterface $product){
  switch ($product->bundle()) {
    case 'e_prestation':
       //  \Drupal::messenger()->addMessage( "Title (" . $product->getTitle() . ") has bein saved!");
        $nom_prenom = $product->get('field_nom_prenom_')->getValue();
        $product->set('title' , $nom_prenom );
     break;
  }
}

/**
 * Implements hook_entity_presave().
 */
 /*
function notemail_node_presave(NodeInterface $node) {
  
}
*/
/**
 * Implements hook_help().
 */
function notemail_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the notemail module.
    case 'help.page.notemail':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('send an email programmatically After note creation') . '</p>';
      return $output;

    default:
  }
}

function notemail_node_presave(Drupal\node\NodeInterface $node) {
	if (($node->get('moderation_state')->target_id ) === 'comptabilite' || ($node->get('moderation_state')->target_id ) === 'dispatcheur' || ($node->get('moderation_state')->target_id ) === 'to_client' || ($node->get('moderation_state')->target_id ) === 'traitement' || ($node->get('moderation_state')->target_id ) === 'validation' || ($node->get('moderation_state')->target_id ) === 'annulation' )  {
$node->set('field_cheking', 0);
}
if (($node->get('moderation_state')->target_id ) === 'checking' )  {
$node->set('field_cheking', 1);
}
 // $node->set('field_cheking', 0);
}
function notemail_entity_update(Drupal\Core\Entity\EntityInterface $entity) {


 
 if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'note')) {
    return;
  }

  $note_email = $entity->get('field_email')->value;
  $note_command = $entity->get('field_n_command')->value;
  $note_etape = $entity->get('moderation_state')->target_id;
  $note_suivi = $entity->get('field_uuid')->value;
  $note_nom = $entity->get('field_nom')->value;
  $note_prenom = $entity->get('field_prenom')->value;
  $note_province = $entity->get('field_prefecture')->value;
  $note_phone = $entity->get('field_phone_number')->value;
  $isChekced = $entity->get('field_cheking')->getValue();

  if (($note_etape ) === 'checking'  || ($note_etape )  === 'comptabilite' ||  ($note_etape ) === 'traitement' || ($note_etape ) === 'validation' || ($note_etape ) === 'dispatcheur'  || ($note_etape ) === 'annulation'  || ($note_etape ) === 'article_4' || ($note_etape ) === 'verification_par_cs_' || ($note_etape ) === 'enregistrement_bo'  ) {
    WorkflowEmail::sendMailWorflow($note_email,$note_prenom,$note_nom, $note_suivi,$note_province,$note_command,$note_etape );
  }

 // Helper::sendSMS($note_phone, $entity->get('moderation_state')->target_id ); 
if (($entity->get('moderation_state')->target_id ) === 'to_client') {
	Helper::sendMailFinal($note_email, $note_suivi, 'E-note',file_create_url($entity->field_e_node->entity->getFileUri()));
	// Helper::sendMailFinal_cci($note_email, $note_suivi, 'E-note 1',file_create_url($entity->field_e_node->entity->getFileUri()), $entity->get('field_nom')->value, $note_prenom);
}
if (($entity->get('moderation_state')->target_id ) === 'archived') {
    $motif = $entity->get('field_motif')->value ;

//	Helper::sendSMSAnnulerpaiement($note_phone,$note_suivi );
/* if (!$motif) {
    Helper::sendMailAnnulerpaiement($note_email, $note_suivi, 'E-note');
} else {
    Helper::sendMailAnnulerpaiementAvecMotif($note_email, $note_suivi, 'E-note',$entity->get('field_motif')->value);
} */ 


Helper::sendMailAnnulerpaiementAvecMotif($note_email, $note_suivi, 'E-note',$entity->get('field_motif')->value);	
	
	Helper::sendMailAnnulerpaiement_cci($note_email, $note_suivi, 'E-note', $note_nom, $note_prenom,$entity->get('field_motif')->value  );
} 
if ( $isChekced[0]['value'] === 1 ) {
	Helper::sendMail($note_email, $note_suivi, 'E-note');
	//Helper::sendSMS($note_phone,$note_suivi );
	//Helper::sendMail_cci($note_email, $note_suivi, 'E-note', $note_nom, $note_prenom );
}

}


/**
 * Implements hook_mail().
 */
function notemail_mail($key, &$message, $params) {
	
	 $config = \Drupal::config('notemail.settings');
		  $ccmail = $config->get('emailcci');
	
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'create_article':
      $message['from'] =  "e_services@aunador.ma" ;//\Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['node_title']), $options);
	  $message['format'] = 'text/html';
      $message['body'][] = $params['message'];

	//  $message['params']['files'] = $params['attachments'];
      break;
	case 'sendMailWorflow':
      $message['from'] =  "e_services@aunador.ma" ;//\Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['node_title']), $options);
	  $message['format'] = 'text/html';
	  $message['headers']['MIME-Version'] = '1.0';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['headers']['Content-Transfer-Encoding'] = '8Bit';
      $message['headers']['X-Mailer'] = 'Drupal 1';
      $message['body'][] = $params['message'];
	  $message['headers']['Bcc'] = 'cci@dardev.ma';
          break;
    case 'send_note':
      $message['from'] =  "e_services@aunador.ma" ;//\Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['node_title']), $options);
	  $message['format'] = 'text/html';
	  $message['headers']['MIME-Version'] = '1.0';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed'; 
      $message['headers']['Content-Transfer-Encoding'] = '8Bit';
      $message['headers']['X-Mailer'] = 'Drupal 20';
      $message['body'][] = $params['message'];
	  $message['headers']['Bcc'] = 'dardev.maroc@gmail.com';
	  $params['headers']['Cc'] = 'dardev.maroc@gmail.com';
          break;

  }
}



/**
 * Implements hook_entity_insert().
 */
function notemail_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'note')) {
    return;
  }

}
 
  
function notemail_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  $uid = \Drupal::currentUser()->id();
  $roles = $user->getRoles();
 // $node = \Drupal\node\NodeInterface;
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getEntityTypeId() !== 'node' || ($node->getEntityTypeId() === 'node' && $node->bundle() === 'note')) {
    $form['#attached']['library'][] = 'notemail/global-js';
    return;
  }
  //kint($form_state->getStorage()['form_display']->getTargetBundle());

  
  }