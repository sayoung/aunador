<?php

/**
 * @file
 * Contains commerce_print functionalities.
 */

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_order\Entity\OrderType;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_extra_field_info().
 */
function commerce_print_entity_extra_field_info() {
  $return = [];
  foreach (OrderType::loadMultiple() as $order_type) {
    $return['commerce_order'][$order_type->id()]['display']['print'] = [
      'label'       => t('Print'),
      'description' => t('Print operation link'),
      'weight'      => 100,
      'visible'     => TRUE,
    ];
  }

  return $return;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for commerce_order entities.
 */
function commerce_print_commerce_order_view_alter(array &$build, OrderInterface $order, EntityViewDisplayInterface $display) {

  if (!$display->getComponent('print')) {
    // Not editing our custom Print view move. Stop now.
    return;
  }

  // Add "Print to PDF" action.
  $order_actions_key = ['state', 0, 'actions'];
  $actions           = NestedArray::keyExists($build, $order_actions_key) ? NestedArray::getValue($build, $order_actions_key) : [];
  $actions['print']  = [
    '#type'       => 'link',
    '#title'      => t('Print'),
    '#url'        => Url::fromRoute(
      'entity.commerce_order.user_print',
      [
        'user'           => \Drupal::currentUser()->id(),
        'commerce_order' => $order->id(),
      ],
      [
        'query' => [
          'destination' => $order->toUrl()->toString(),
        ],
      ]
    ),
    '#attributes' => [
      'target' => '_blank',
      'class'  => ['button', 'button--primary'],
    ],
  ];
  NestedArray::setValue($build, $order_actions_key, $actions);

  // Attach helper libraries.
  $build['#attached']['library'][] = 'commerce_print/print';
}
